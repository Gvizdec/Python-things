from sys import exc_info
from random import randint, shuffle
from math import ceil

def AskForPswdPower():
    #this function will continuously ask for password power until user will give correct answer
    #it returns pasword power or information to stop the program
    while True:
        print('How strong password you want?')
        try:
            pwStrenght = input('1-very weak: 4-6 letters,\n\
2-weak: 6-8 letters,\n\
3-regular: 8-10 letters, uper and lower cases,\n\
4-strong: 10-12 letters, uper, lower cases, numbers and symbols,\n\
5-very strong: over 12-14 letters, uper, lower cases, numbers and symbols,\n\
Type number 1-5 to choose pswd or 0 to exit: ')
            strenghtLevels = ['0','1','2','3','4','5']
            if pwStrenght not in strenghtLevels:
                input('pick number from 1-5...\nPress enter to continue')
                continue
            else:
                return pwStrenght
        except:
            input('Something went wrong %s\nPress enter to continue'%exc_info()[0])

def LowerLetters():
    #returns shuffled list of asci codes for lower letters
    symbols=[]
    for a in range(97,123):
        symbols.append(a)
    shuffle(symbols)
    return symbols

def UpperLetters():
    #returns shuffled list of asci codes for upper letters
    symbols=[]
    for a in range(65,91):
        symbols.append(a)
    shuffle(symbols)
    return symbols

def Numbers():
    # returns shuffled list of asci codes for numbers 0-9
    symbols=[]
    for a in range(48,58):
        symbols.append(a)
    shuffle(symbols)
    return symbols

def Symbols():
    # returns shuffled list of asci codes for different symbols
    symbols=[]
    for a in range(33,48):
        symbols.append(a)
    for a in range(57,65):
        symbols.append(a)
    for a in range(91,97):
        symbols.append(a)
    for a in range(123,127):
        symbols.append(a)
    shuffle(symbols)
    return symbols

def CreatePswd(lenght,power):
    #input password lenght and power as dictionary
    #returns paswwrod from combination of lower, upper letters, numbers and sybols
    pswd = []
    #decide which asci symbols, and how much, should be used to build password
    #calls functions from above if need to gnerate shuffled list of asci symbols
    if lenght*power['lower letters']>0:
        lowerLetters = LowerLetters()
        pswd.extend(lowerLetters[:ceil(lenght*power['lower letters'])])
    if lenght*power['upper letters']>0:
        upperLetters = UpperLetters()
        pswd.extend(upperLetters[:ceil(lenght*power['upper letters'])])
    if lenght*power['numbers']>0:
        numbers = Numbers()
        pswd.extend(numbers[:ceil(lenght*power['numbers'])])
    if lenght*power['symbols']>0:
        symbols = Symbols()
        pswd.extend(symbols[:ceil(lenght*power['symbols'])])
    #suffle password again
    shuffle(pswd)
    password=''
    #translate ASCI symbols for proper symbols
    for a in pswd:
        password+=chr(int(a))
    return password

#this loop will continuously repeat function that asks for password power,
#and decide which password length and power should be forwarded to password generating function
print('Password generator')
while True:

    #ask user for password strenght
    pwStrenght=AskForPswdPower()

    #decide what should be used to build password
    if pwStrenght == '1':
        pwLenght=randint(4,6)
        power={'lower letters':1,
                 'upper letters':0,
                 'numbers':0,
                 'symbols':0}
    elif pwStrenght == '2':
        pwLenght=randint(6,8)
        power={'lower letters':1,
                 'upper letters':0,
                 'numbers':0,
                 'symbols':0}
    elif pwStrenght == '3':
        pwLenght=randint(8,10)
        power={'lower letters':0.5,
                 'upper letters':0.5,
                 'numbers':0,
                 'symbols':0}
    elif pwStrenght == '4':
        pwLenght=randint(10,12)
        power={'lower letters':0.25,
                 'upper letters':0.25,
                 'numbers':0.25,
                 'symbols':0.25}
    elif pwStrenght == '5':
        pwLenght=randint(12,14)
        power={'lower letters':0.25,
                 'upper letters':0.25,
                 'numbers':0.25,
                 'symbols':0.25}
    #if user typed 0 program will end
    else:
        print('Program failed successfully')
        break
    #this will print out generated password and will wait for user to press enter
    input('password: %s\nPress enter to continue'%CreatePswd(pwLenght,power))
